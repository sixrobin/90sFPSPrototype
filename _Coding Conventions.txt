------------------------
GENERAL
------------------------

_ All accessibility levels are written (including private).
_ Only use delegates, no System.Action (for better readability of event arguments).
_ Event listener methods must only call another method and have no "hard-written" logic.
_ GetComponent used in Start() for caching should have a linked RequireComponent attribute.
_ Adding commands to DebugConsole is done as the last instructions in Awake().
_ Enums shall have a "None" value used as default value.
_ Use early returns instead of big if statements, even for one instruction.
_ Use for loops instead of foreach loop whenever it's possible.
_ Float values are written with the "f" suffix even if their value is whole.
_ Debug.Log should have a context if possible.
_ Else statements require curly brackets only if the related if statement have brackets.



------------------------
ORDERING
------------------------

_ Nested classes.
_ Constants.
_ Inspector exposed fields, sorted for Inspector editing purpose.
_ Non exposed fields, sorted by context.
_ Delegates.
_ Events.
_ Enums.
_ Properties (if a property is linked to a field, the field is declared right above the property).
_ Constructors.
_ Destructors.
_ Methods.
	_ Sorted by context, following these rules :
		_ Animation events are the first public methods, have a name starting with "On" and shall have a comment "// Animation event." right above.
		_ Event listeners are the first private methods and have a name starting with "On". Rest of the name should be similar to the event name.
		_ Overridden methods should be before non-herited methods, but this can change according to the context.
	_ Unity event methods (Start, Update, OnGUI) are written as the last private methods, ordered by execution order (https://docs.unity3d.com/Manual/ExecutionOrder.html).
	_ Debug methods, public or not, are written after Unity event methods.
		_ This has nothing to do with any ContextMenu attribute, that can be used on any method without changing its ordering.
		
_ In each category, follow this order :
	_ Static.
	_ Non static.
		_ Public.
		_ Protected.
		_ Private.



------------------------
NAMING
------------------------

_ Constants are named using Upper case (ex: SKIN_WIDTH, ATK_PARAM_NAME).
_ Fields are named using Camel case after an underscore (ex: _speed, _animator).
_ Properties are named using Pascal case.
_ Properties returning a boolean have a name starting with a verb (ex: Exists, IsValid, HasHealth).
_ Delegates are named using the context in past tense and the suffix "EventHandler" (ex: KilledEventHandler).
_ Events are named using the delegate context (ex: Killed).
_ Event listener methods are named like the event, with possibly some context (ex: OnEnemyKilled).
_ Animation events methods are named as an event without necessarily using the past tense (ex: OnAttackFrame).
_ Debug field are named with the "dbg" prefix (after the underscore).
_ Debug properties are named with the "DBG_" prefix.
_ Debug methods are named with the "DBG_" prefix.
_ Coroutines are named with the "Coroutine" suffix.

_ Some words can be contracted only if there's no possible mistake (ex: dbg for debug, atk for attack, vel for velocity).
	_ This is NOT valid for method names.



------------------------
NAMESPACES
------------------------

_ Using directives are inside the namespaces.
_ Namespaces are written on one line.
_ Each class must be inside a namespace.



------------------------
FIELDS AND PROPERTIES
------------------------

_ All field are private.
_ All fields are declared with a default value, even those that are not shown in Inspector.
_ SerializeField attribute is written on the same line as the field, and multiple serialized fields don't have to be separate with a blank line.
_ All properties should have a private set, with the possibility of having methods to "access" them.